Model run by juliagershenzon using Apollo 0.3.1 on R 4.3.1 for Darwin.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : LC_PT_guarantee
Model description                           : LC model
Model run at                                : 2023-11-28 11:48:27.216234
Estimation method                           : bgw
Model diagnosis                             : Relative function convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -11.599452
     reciprocal of condition number         : 3.63814e-06
Number of individuals                       : 452
Number of rows in database                  : 2260
Number of modelled outcomes                 : 2260

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -1566.51
LL (whole model) at equal shares, LL(0)     : -1566.51
LL (whole model) at observed shares, LL(C)  : -1564.03
LL(final, whole model)                      : -1345.87
Rho-squared vs equal shares                  :  0.1409 
Adj.Rho-squared vs equal shares              :  0.1313 
Rho-squared vs observed shares               :  0.1395 
Adj.Rho-squared vs observed shares           :  0.1312 
AIC                                         :  2721.74 
BIC                                         :  2807.58 

LL(0,Class_1)                    : -1566.51
LL(final,Class_1)                : -2465.04
LL(0,Class_2)                    : -1566.51
LL(final,Class_2)                : -1514.53

Estimated parameters                        : 15
Time taken (hh:mm:ss)                       :  00:00:19.15 
     pre-estimation                         :  00:00:6.23 
     estimation                             :  00:00:4.3 
     post-estimation                        :  00:00:8.62 
Iterations                                  :  14  

Unconstrained optimisation.

Estimates:


Summary of class allocation for model component :


Overview of choices for MNL model component Class_1:
                                    alt1    alt2
Times available                  2260.00 2260.00
Times chosen                     1183.00 1077.00
Percentage chosen overall          52.35   47.65
Percentage chosen when available   52.35   47.65



Overview of choices for MNL model component Class_2:
                                    alt1    alt2
Times available                  2260.00 2260.00
Times chosen                     1183.00 1077.00
Percentage chosen overall          52.35   47.65
Percentage chosen when available   52.35   47.65



Classical covariance matrix:

Robust covariance matrix:

Classical correlation matrix:

Robust correlation matrix:

 20 worst outliers in terms of lowest average per choice prediction:

Changes in parameter estimates from starting values:

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                
modelName              "LC_PT_guarantee"                                    
modelDescr             "LC model"                                           
indivID                "RID"                                                
debug                  "FALSE"                                              
nCores                 "1"                                                  
workInLogs             "FALSE"                                              
seed                   "13"                                                 
mixing                 "FALSE"                                              
HB                     "FALSE"                                              
noValidation           "FALSE"                                              
noDiagnostics          "FALSE"                                              
calculateLLC           "TRUE"                                               
outputDirectory        "/Users/juliagershenzon/Desktop/quanti/QQM-Mobility/"
panelData              "TRUE"                                               
analyticGrad           "TRUE"                                               
analyticGrad_manualSet "FALSE"                                              
overridePanel          "FALSE"                                              
preventOverridePanel   "FALSE"                                              
noModification         "FALSE"                                              

Hessian routines attempted
--------------------------
numerical second derivative of LL (using numDeriv)


apollo_lcPars
---------------
function(apollo_beta, apollo_inputs){
  lcpars = list()
  lcpars[["b_spatial"]] = list(b_spatial_1, b_spatial_2)
  lcpars[["b_temporal"]] = list(b_temporal_1, b_temporal_2)
  lcpars[["b_drtpattern"]] = list(b_drtpattern_1, b_drtpattern_2)
  lcpars[["b_waiting"]] = list(b_waiting_1,  b_waiting_2)
  lcpars[["b_discount"]] = list(b_discount_1, b_discount_2)
  lcpars[["b_compensation"]] = list(b_compensation_1, b_compensation_2)
  lcpars[["b_price"]] = list(b_price_1, b_price_2)

  
  V=list() #class membership equations
  V[["class_1"]] = delta_1 
  V[["class_2"]] = delta_2 #+ gamma_notbought*buy_never+gamma_framing*deck
  
  mnl_settings = list(
    alternatives = c(class_1=1, class_2=2), 
    avail        = 1, 
    choiceVar    = NA, 
    V            = V
  )
  
  
  lcpars[["pi_values"]] = apollo_mnl(mnl_settings, functionality="raw")
  
  lcpars[["pi_values"]] = apollo_firstRow(lcpars[["pi_values"]], apollo_inputs)
  
  return(lcpars)
}
<bytecode: 0x7fcb2906a2b0>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
  
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))
  
  ### Create list of probabilities P
  P = list()
  
  
  ### Define settings for MNL model component that are generic across classes
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2),
    avail        = list(1),
    choiceVar    = CHOICE
  )
  

  ### Loop over classes
  s=1
  while(s<=2){
    
    ### Compute class-specific utilities
    V = list()
    
    V[["alt1"]]  = b_spatial[[s]]  * Spatial_1 + b_temporal[[s]] * Temporal_1 + b_drtpattern[[s]] * DRTPattern_1 +
      b_waiting[[s]] * Waitingtime_1 + b_discount[[s]] * Discount_1 + b_compensation[[s]] * Compensation_1 + b_price[[s]] * Price_1
    V[["alt2"]]  = b_spatial[[s]]  * Spatial_2 + b_temporal[[s]] * Temporal_2 + b_drtpattern[[s]] * DRTPattern_2 +
      b_waiting[[s]] * Waitingtime_2 + b_discount[[s]] * Discount_2 + b_compensation[[s]] * Compensation_2 + b_price[[s]] * Price_2

    
    mnl_settings$V = V
    mnl_settings$componentName = paste0("Class_",s)
    
    ### Compute within-class choice probabilities using MNL model
    P[[paste0("Class_",s)]] = apollo_mnl(mnl_settings, functionality)
    
    ### Take product across observation for same individual
    P[[paste0("Class_",s)]] = apollo_panelProd(P[[paste0("Class_",s)]], apollo_inputs ,functionality)
    
    s=s+1}
  
  ### Compute latent class model probabilities
  lc_settings   = list(inClassProb = P, classProb=pi_values)
  P[["model"]] = apollo_lc(lc_settings, apollo_inputs, functionality)
  
  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
